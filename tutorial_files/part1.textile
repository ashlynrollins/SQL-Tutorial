h2. A Gentle Introduction to SQL Using SQLite

h2. Part I

SQL or Structured Query language is the language used to communicate with relational databases. What are relational databases? Well, most of the popular database systems you may know, such as MS Access, MySQL or SQLite, are all relational. That is, they all use a relational model, which, it turns out, can be described much like a spreadsheet: 
* Data are organized into tables (relations) that represent a collection of similar objects (e.g. contributors). 
* The columns of the table represent the attributes that members of the collection share (last name, home address, amount of contribution). 
* Each row in the table represents an individual member of the collection (one contributor). 
* And the values in the row represent the attributes of that individual (Smith, 1228 Laurel St., $250).

Much of the power of a relational database lies in the ability to query these relations, both within a table (give me all contributors who donated at least $500 and who live in Wyoming) and among tables (from the contributors, judges and litigants tables, give me all contributors who donated at least $1000 to Judge Crawford and who also had legal cases over which Judge Crawford presided). SQL is the powerful and rather minimalist language we use to ask such questions of our data in a relational database. How minimalist is SQL? The basic vocabulary for querying data comes down to a few main verbs:

<pre><code>SELECT
INSERT
UPDATE
DELETE</code></pre>

I imagine you can guess what each of those verbs does, even if you've never written a database query.
To create and change the structure of tables in the database, there are a few other verbs to use:
<pre><code>CREATE
DROP
ALTER
</code></pre>
Those are the keywords that perform almost everything you need to do. The language also includes a number of modifiers that help specify the action of the verbs, but the core list comes down to a couple dozen words. These basic keywords are common across pretty much all relational databases. A specific database management system (Access, MySQL or SQLite) may add its own extensions to the common keywords, but the lion's share of the work is done with this handful of words, and they're basically the same across database applications. 

By combining these simple keywords, you can create remarkably complex and specific queries. And the basic syntax still reads fairly clearly:
<pre><code>SELECT last_name FROM contributors WHERE state = 'WY'; </code></pre>
The SQL query above reads pretty much like the English sentence for the same request: 
<pre><code>Select the last name from the contributors table where the contributor's state is WY.</code></pre>
If you're using a graphical interface such as a datagrid, that interface is simply constructing queries like these behind the scenes. So, why not take command of your queries and write them yourself?

A couple of things off the bat: 
* SQL keywords are not case-sensitive. So capitalizing SELECT in the statement above is optional. Using all caps for keywords is considered good form, though, because it helps distinguish keywords from table names or other non-keywords.
* The statement ends with a semi-colon. This is the standard way of ending a statement in SQL. Some systems enforce this convention.

So, let's dive in. For this tutorial, we will be using SQLite, a free and open source database manager that's lightweight and portable.

h3. Installing DB Browser for SQLite

To create our own databases, we'll use the free and open source "DB Browser for SQLite":https://sqlitebrowser.org/. Per their documentation:

bq. DB Browser for SQLite is a high quality, visual, open source tool to create, design, and edit database files compatible with SQLite. It is for users and developers wanting to create databases, search, and edit data. It uses a familiar spreadsheet-like interface, and you don't need to learn complicated SQL commands.

Go to "this page":https://sqlitebrowser.org/, download the installer appropriate for your machine, and execute the installer.

Once finished, search for the program and fire it up. 

On a Mac, you can hit @Command + Space bar@ and type your search to find the program, or search in *Launchpad*.

!images/db-browser/start_window.png!

h3. Creating the First Database

Mousing over each of the icons at the top of the DB Browser tool will show what the icon does.

To create a database, simply click on the icon for "New Database": !images/db-browser/new_database.png!

Name the database "test" and save it anywhere you like (the desktop will work, or your documents folder). This single file will contain the entire database you create.

h3. Creating a Table

Click the "Create Table" icon (!images/db-browser/new_table.png!), and you'll get a form allowing you to create a new table. 
To create a table, we have to define the attributes or columns that make it up. For each column, we define the datatype of the data it will contain. 

Name the table "contributors" and begin creating columns as below by clicking the "Add field" button. 

*Note: You should name and order the fields AND fill in the drop-down menu and checkboxes exactly as displayed!*

!images/db-browser/create_table.png!

h4. Important notes

Some important things to note:

* As you start adding fields and options, note how the table creation SQL in the bottom pane dynamically updates.
* The @id@ field will be a unique identifier for each contributor (and therefore will be the "Primary Key" for the row), which is why we checked the @PK@ box for this one field. Checking the @AI@ box will make this integer automatically increment for each row we add (so each new row will have a new id). Finally, this field should not be null or empty (because we need it as the unique identifier), so we check the @Not@ box as well.
* The next five columns will all contain text strings of undetermined lengths (last names, for example, come in all kinds of lengths), so we'll use the @TEXT@ datatype, which allows for text of varying length.

By the way, it may seem strange that the @zip@ column uses a @TEXT@ datatype, but remember that some zips start with a 0 (00501 is in NY). So, we want to treat this column as a string of text, rather than as a number (which would be 501).

Click OK and DB Browser will create the table based on your specifications, by executing the full SQL statement in the lower pane of the table creation window: 

<pre><code>
CREATE TABLE `contributors` (
	`id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`last_name`	TEXT,
	`first_name`	TEXT,
	`city`	TEXT,
	`state`	TEXT,
	`zip`	TEXT,
	`amount`	INTEGER
);
</code></pre>

The syntax should be fairly clear, since it just reflects the choices we made in the form. It's creating a table called "contributors" with the fields and data types we've defined.

You should now have a "contributors" table in the list in the Database Structure panel of the manager. Clicking the arrow beside the listing for "contributors" will show you the column list for the table.

!images/db-browser/table_and_column_after_creation.png!

h3. Inserting Data

Now that we have a table in the database, we can start inserting data. This task is accomplished with (oddly enough) an INSERT statement.

Click the "Execute SQL" tab (it's in the second menu row, under the icons for creating/opening databases): 

!images/db-browser/execute_sql.png!

The top pane with the flashing cursor is where you can write SQL queries. Since we don't have data in the table yet, let's go ahead and insert some by copying/pasting the below SQL into the pane with the flashing cursor.

<pre><code>INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Buffet', 'Warren', 'Omaha', 'Nebraska', '68101', 1500);</code></pre>

This is a little more obscure than the @CREATE@ or @SELECT@ syntax, but it's still fairly clear. To insert a row in the table, we execute the @INSERT INTO@ statement with a table name, a list of columns to populate, and the @VALUES@ for each of those columns. *The order of the columns in the column list must match the order of values in the values list.*

It's very important to surround text values with single quotation marks. Two things to note:
* The quotation marks indicate to SQL that this is a literal string (the word 'Buffet'), rather than a column name or other special usage. 
* SQL uses single quotation marks around text strings. Some database systems will also accept double quotes, but some will throw an error.
* The commas between values are placed outside of the quote marks, not inside. 

Notice that we didn't insert a value for id. Because we set that column to AUTOINCREMENT, SQLite will populate the id with the next integer in the sequence. So, we don't need to worry about choosing unique ids; SQLite takes care of it.

Finally, we didn't include dollar signs or commas in the "amount" column. We created the "amount" column as an integer, so we should only insert integers there. (Different database management systems will react differently if you try to insert non-numeric characters in an integer column; it's best to avoid doing so.)

If you haven't done so already, click the Execute SQL button !images/db-browser/execute_sql_button.png!.

The bottom pane should say "Query executed successfully" followed by a copy of the SQL that was executed. *Success! You've added data!*

You can view the data by going to the "Browse Data" tab:

!images/db-browser/browse_data.png!

Just so we'll have some data to play with, let's execute a few more @INSERT@ statements. Go back to the "Execute SQL" tab and paste in these lines:

<pre><code>
INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Winfrey', 'Oprah', 'Chicago', 'IL', '60601', 500);
INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Chambers', 'Anne Cox', 'Atlanta', 'GA', '30301', 200);
INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Cathy', 'S. Truett', 'Atlanta', 'GA', '30301', 1200);
</code></pre>

You can paste all three lines into the SQL text box at the same time. The semi-colons indicate the end of each statement.

bq. Before inserting these new records, you should delete the original @INSERT@ statement to avoid re-running it, which would result in a duplicate record.

Click the "Execute SQL" button.

You can view the new records in the "Browse Data" tab. *You should see 4 rows in total now.*

h3. Selecting Data

Now that we have a small data set to use, let's start querying it. In the "Execute SQL" tab, type the following into the SQL text box:

<pre><code>SELECT * FROM contributors;</code></pre>

And click the "Execute SQL" button.

You should see a nice grid display of all contributors you've added. The @*@ character is a common wildcard. In this SELECT, it is used to indicate all columns. So, we have selected all columns from all rows in the contributors table.

To define which columns of data you want to return, simply provide a comma-separated list of column names to SELECT:

<pre><code>SELECT city, state FROM contributors;</code></pre>

Clicking "Execute SQL" should give you a two-column table of cities and states.

!images/db-browser/city_state.png!

h3. Using DISTINCT to get a distinct set

The SELECT query above gives us a list of cities and states, but it includes duplicate rows for Atlanta, GA. Adding @DISTINCT@ to the query eliminates the duplicates:

<pre><code>SELECT DISTINCT city, state FROM contributors;</code></pre>

!images/db-browser/select_distinct.png!

Now you should have only three rows in your results, showing the unique combinations for city and state in the table.

Notice what happens if you add the <code>last_name</code> field to the DISTINCT query:

<pre><code>SELECT DISTINCT last_name, city, state FROM contributors;</code></pre>

!images/db-browser/select_distinct_lname.png!

We're back to four rows. There are four distinct combinations of last_name, city and state in the table, so that's what we get from @DISTINCT@.

h3. The WHERE Clause

The @WHERE@ clause provides the scalpel for your SQL operations. A well-crafted @WHERE@ clause can let you take exactly the slice of the data you want. It sets the conditions for the SELECT, and the query will return only those rows that match the conditions.

Say, for example, we only wanted to see contributors from Georgia:

<pre><code>SELECT * FROM contributors WHERE state='GA';</code></pre>

bq. Remember the single quotes around the string "GA)

!images/db-browser/where_clause1.png!

And you can test for more than equality in the WHERE clause. This query finds only the contributors who have donated more than $1200: 
<pre><code>SELECT * FROM contributors WHERE amount > 1200;</code></pre>

Of course, donors who have given exactly $1200 won't be included in the results. To include them, use the @>=@ operator:

<pre><code>SELECT * FROM contributors WHERE amount >= 1200;</code></pre>

Here are some other operators you can use:

|*operator*|*description*|
|=|Equal|
|!=|Not equal*|
|>|Greater than|
|<|Less than|
|>=|Greater than or equal|
|<=|Less than or equal|

bq. * Many database systems also use <> for "Not equal"

h3. Combining conditions with AND and OR

You can combine conditions using @AND@ and @OR@. For example, let's find all contributors from Georgia who have given more than $1000:

<pre><code>SELECT * FROM contributors WHERE state = 'GA' AND amount > 1000;</code></pre>

!images/db-browser/first_and.png!

Now let's find all contributors who either live in Georgia or who have given more than $1000:

<pre><code>SELECT * FROM contributors WHERE state = 'GA' OR amount > 1000;</code></pre>

!images/db-browser/or_statement.png!

And now let's try to get the big spenders from Chicago and Georgia:

<pre><code>SELECT * FROM contributors WHERE city = 'Chicago' OR state = 'GA' AND amount > 1000;</code></pre>

!images/db-browser/and_or_sans_parens.png!

Hmm . . . Oprah is in the list, but she only donated $500. What gives?

The problem here is that the @AND@ operator has a higher precedence than the @OR@ operator, which means it gets evaluated first. So, in effect, our query really looks like this:

<pre><code>SELECT * FROM contributors WHERE city = 'Chicago' OR (state = 'GA' AND amount > 1000);</code></pre>

Which selects all contributors from Chicago and only those contributors from Georgia who have also donated more than $1000.

We can use parentheses to clarify the original query and actually get the high rollers we wanted:

<pre><code>SELECT * FROM contributors WHERE (city = 'Chicago' OR state = 'GA') AND amount > 1000;</code></pre>

Parentheses are often helpful when you need to disambiguate a query. Technically, you're changing the order of evaluation here, but you're also just making the intention of your statement clear.

h3. Sorting results with ORDER BY

To order your result set by the values in a particular column, use @ORDER BY@:

<pre><code>SELECT last_name, amount FROM contributors WHERE amount > 200 ORDER BY amount;</code></pre>

!images/db-browser/order_by.png!

Only the rows matching the @WHERE@ clause are returned (i.e. only those with an amount exceeding $200).

The default direction for @ORDER BY@ is ascending; results are ordered from smallest amount to greatest.

To specify the direction of the sorting, use the @DESC@ or @ASC@ keyword:

<pre><code>SELECT last_name, amount FROM contributors WHERE amount > 200 ORDER BY amount DESC;</code></pre>

!images/db-browser/order_by_desc.png!

You can also order the results by more than one column. Rows with the same value for the first column of the @ORDER BY@ are further ordered by the additional column(s):

<pre><code>SELECT last_name, state, amount FROM contributors ORDER BY state, amount DESC;</code></pre>

!images/db-browser/order_by_multiple.png!

Here we get the list of contributors ordered by state and then ordered by the amount, from highest to lowest amount within the state, of their contribution. This is one quick way to see who has contributed the most in each state.

h3. Changing values with UPDATE

Now we have some basic skills for creating tables, inserting data into the table and querying the data we've inserted. But what about changing the values in existing rows? To change the value of existing rows, we use the <code>UPDATE</code> statement.

One thing that just looks wrong with our data set is that value "Nebraska" in the state column:

<pre><code>SELECT state FROM contributors;</code></pre>

!images/db-browser/state_column.png!

That should be the postal abbreviation, like the other rows. To change that value, we need to use @UPDATE@ to @SET@ the value for a column. *But we want to make sure we don't blow away the state values in our other columns.*

If we just used <code>UPDATE contributors SET state = 'NE'; //DON'T DO THIS!!</code>, we would end up replacing the <code>state</code> value in every row with "NE". Not exactly what we want.

So, we have to define a @WHERE@ clause to determine which rows will be changed by the @UPDATE@:

<pre><code>UPDATE contributors SET state = 'NE' WHERE state = 'Nebraska';</code></pre>

Ok, let's see how the state list looks:

<pre><code>SELECT DISTINCT state FROM contributors;</code></pre>

!images/db-browser/state_after_update.png!

Now that's more like it.

h3. DELETE

The remaining keyword from the original list is <code>DELETE</code>, which unsurprisingly deletes rows from the table. As when using <code>UPDATE</code>, it's important to specify a <code>WHERE</code> clause with <code>DELETE</code>. Running <code>DELETE</code> without a <code>WHERE</code> clause will blow away your precious data and can seriously ruin your day.

Before executing a <code>DELETE</code> or <code>UPDATE</code>, it's always a good idea to run a <code>SELECT</code> with the same <code>WHERE</code> clause, just to see which rows your changes will affect. 

So, let's get rid of one of our rows. How about deleting Warren Buffet?

For our <code>WHERE</code> clause, we could match on any column or combination of columns, but if we know the <code>PRIMARY KEY</code> value of the row, that's our safest bet. Because it's a unique identifier, we can be certain we're not accidentally deleting other rows. First let's make sure we have the row we want:

<pre><code>SELECT * FROM contributors WHERE id = 1;</code></pre>

!images/db-browser/buffet_by_id.png!

Looks like the one we want, so let's delete it:

<pre><code>DELETE FROM contributors WHERE id = 1;</code></pre>

bq. Notice that we don't need to specify columns or use <code>*</code> with <code>DELETE</code>, since we're deleting the entire row.

Now the row should be gone:

<pre><code>SELECT * FROM contributors;</code></pre>

h3. Importing data from a file

Finally let's move on to a topic that takes us a bit outside the basic SQL syntax. One common task we all face in data management is importing a data set into the database. Often, we receive a file in some other format such as MS Excel, CSV (comma-separated values) or tab-delimited and we want to get those values into a database table in order to run SQL queries on them. 

Each database management system handles importing values from a file a bit differently. DB Browser for SQLite provides a nice interface for create new tables data imports from text files, but it requires some finessing to add new data to our existing @contributors@ table.

First, let's grab a plain text file full of contributors from the FEC database. Go to ["tutorial_files/contributors.txt":contributors.txt] and save the file as "contributors.txt" somewhere you can find it (your desktop is a good place).

Notice that this file is pipe-delimited (the columns are separated by the **|** character). I find this delimiter easy to use because it's unlikely to appear within a value in the import data. But using comma or tab characters to separate the values will work as well.

Also notice that there is no @id@ column. *DB Browser will be unable to directly import this data into the existing @contributors@ table.* Instead, we'll import this data into a temporary table called @contributors_temp@, and then use a SQL @INSERT@ statement to copy the rows into our original @contributors@ table. Along the way, SQLite will populate the @id@ field for each row using auto-increment, the same as it did for our earlier @INSERT@ examples.

Now that we know what we're importing, go back to DB Browser and open the import wizard by selecting @File -> Import -> Table from CSV file...@, navigate to the "contributors.txt" file and click Open.

An import wizard should appear that you can use to define your import.

!images/db-browser/import_contribs_to_temp.png!

* Type "contributors_temp" in the "Table name" field
* Check the "Column names in first line" checkbox.
* Select the **pipe(|)** for "Field separator"
* Uncheck the "Trim fields?" checkbox

For everything else, you can keep the default selections.

Click OK and the data should import into a new table called @contributors_temp@. 

bq. Note that DB Browser is doing a bit of magic here. We didn't have to manually define the @contributors_temp@ table. Instead, DB Browser simply created a table with column names matching our field headers, autoamtically set the column data types to @TEXT@, and inserted the rows for us.

Now that we loaded our temporary table, we're ready to copy the new rows into our main table by running the below SQL:

<pre><code>INSERT INTO contributors(last_name, first_name, city, state, zip, amount) SELECT * FROM contributors_temp;</code></pre>

Finally, you'll probably want to delete the temporary table now that it's done it's job. Just select @contributors_temp@, right-click and choose @Delete table@ and click Yes.

!images/db-browser/delete_temp_table.png!


And now you have 103 rows of data to play with. The FEC data is dirty: there are missing fields, first names include middle names, there are weird values for some columns. Play around with it using the SQL you know, and see what you can find out. If you get surprising results from a query or are wondering how to do something, add a comment to the blog post. 

We'll pick up with some more advanced queries and functions in "Part II":part2.textile.

h3. Further References

http://www.w3schools.com/sql/sql_intro.asp
http://www.firstsql.com/tutor.htm
https://hackr.io/tutorials/learn-sql

<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">A Gentle Introduction to SQL Using SQLite</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="https://github.com/tthibo/SQL-Tutorial" property="cc:attributionName" rel="cc:attributionURL">Troy Thibodeaux</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/">Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License</a>.
